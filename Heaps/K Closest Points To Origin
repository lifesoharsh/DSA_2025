class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> ans;

        auto cmp = [](pair<int, vector<int>> a, pair<int, vector<int>> b){
            return a.first < b.first;
        };

        priority_queue<pair<int, vector<int>>, vector<pair<int, vector<int>>>, decltype(cmp)> cp(cmp);
        int distance;

        for(auto& idx: points){
            int x = idx[0];
            int y = idx[1];
            distance = x*x + y*y;
            
            cp.push({distance, {x, y}});
            if(cp.size() > k) cp.pop();
        }

        while(!cp.empty()){
            auto [_, coordinates] = cp.top();
            ans.push_back(coordinates);
            cp.pop();
        }

        return ans;
    }
};
