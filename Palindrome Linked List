/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        if(!head->next) return true;
        ListNode* dummy = new ListNode(0,head);
        ListNode* slow = dummy;
        ListNode* fast = dummy;
        stack<int> s;

        while(fast && fast->next){
            slow = slow->next;
            s.push(slow->val);
            fast = fast->next->next;
        }

        if(s.empty() || !slow->next) return false;
        bool flag = false;
        while(s.empty()==false && slow){
            slow = slow->next;
            if(!slow) return false;
            if(!fast && !flag){
                s.pop();
                flag = true;
            }
            if(!s.empty()){
                int data = s.top();
                s.pop();
                if(data == slow->val) continue;
            }
            return false;
        }
        return true;
    }
};
